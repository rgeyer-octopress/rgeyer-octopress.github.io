<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reviews | Random Musings]]></title>
  <link href="http://blog.ryangeyer.com/categories/reviews/atom.xml" rel="self"/>
  <link href="http://blog.ryangeyer.com/"/>
  <updated>2014-04-13T18:59:26-07:00</updated>
  <id>http://blog.ryangeyer.com/</id>
  <author>
    <name><![CDATA[Ryan J. Geyer]]></name>
    <email><![CDATA[me@ryangeyer.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MacBook Pro - First Impressions]]></title>
    <link href="http://blog.ryangeyer.com/2010/03/18/macbook-pro-first-impressions/"/>
    <updated>2010-03-18T00:00:00-07:00</updated>
    <id>http://blog.ryangeyer.com/2010/03/18/macbook-pro-first-impressions</id>
    <content type="html"><![CDATA[<p>I just took delivery of my latest new computer from my employer. &nbsp;This time, instead of another run of the mill IBM compatible laptop or desktop it was a fancy new 17&quot; MacBook Pro. &nbsp;We&#39;re developing software which we&#39;re supporting in Safari using the Silverlight plugin and I needed to be able to develop and test in that native environment.</p>


<p>First, let me give you some background. &nbsp;See, I&#39;m an Apple geek from days of yore. &nbsp;We&#39;re talking Mac II and Quadra days here. &nbsp;I was raised around Apples because my father owned his own business in the desktop publishing industry. &nbsp;Around 1996 or so, I started to defect to &quot;the dark side&quot; and use the Windows OS, and only a few short years later I started dabbling with Linux, which is my current OS of choice.</p>


<p>Now, I knew that OSX was BSD based, and I knew I&#39;d like it. &nbsp;I also knew that the Apple hardware was pretty stinkin&#39; elegant. &nbsp;But man.... I had no idea. &nbsp;This feels all so new and exciting, but at the same time comfortable and familiar. &nbsp;In the ~3hrs I&#39;ve had it I&#39;ve installed pretty much an entire Groovy/Grails development tool set as well as installing and configuring things I&#39;ll be using on a daily basis.</p>


<p>I&#39;m discovering some things which require are requiring a bit of research, but once I find the answer it usually fits some pattern or concept that is very familiar. &nbsp;I&#39;ll likely be blogging about a few of those items as I continue to &quot;move in&quot; to my new machine.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modularizing your Grails Application - Domain Classes]]></title>
    <link href="http://blog.ryangeyer.com/2010/03/10/modularizing-your-grails-application-domain-classes/"/>
    <updated>2010-03-10T00:00:00-08:00</updated>
    <id>http://blog.ryangeyer.com/2010/03/10/modularizing-your-grails-application-domain-classes</id>
    <content type="html"><![CDATA[<p>This is the second installment of my <a href="/2010/02/05/what-grooves-you/">What Grooves You?</a> series of posts, this time discussing how to modularize your Grails application.  While Grails does an awesome job of enforcing <a href="http://www.grails.org/Developer+-+Spring+MVC+Integration">MVC</a> once your application reaches a certain size, or you have multiple applications which may have shared components, you're going to have to start thinking about how your going to modularize the reusable parts of your code.</p>


<!--more-->


<p>I encountered this pretty quickly because the application I am working on is broken out into two distinct parts, a public facing web form for submitting data (the "Front End") and a private back office application for managing those user submissions (the "Back End").  These two parts of the application (for compliance reasons) cannot run on the same internet facing system, and the "Back End" must only be available on the internal network.  Of course, both of these applications are going to work with the same database and therefore the same Domain classes.  It would be dangerous and tedious to try to keep the separate domain classes in each project synchronized with one another.</p>




<h2>What won't work</h2>


<p><strong>The RESTful JSON Service</strong></p>

<p>My first thought was to deploy a 3rd application which would be internet visible and act as a proxy for all the database requests.  I could then query that application with REST and handle a JSON payload which would be my domain object.  This actually seemed pretty elegant since I wouldn't have to actually share any code between the Front End and Back End applications and I still got a well defined object on either end.  The problem of course is that all I get is the data for my domain class, and I don't have access to any of the functionality that GORM gives me "for free".  I'd have to duplicate search functionality, limits, grouping, sorting, and all sorts of other querying tools in my service.  That seemed like an awful lot of work for functionality that is offered by GORM and works very well!</p>


<p><strong>Just JAR it man</strong></p>

<p>The next obvious conclusion is to just toss my domain classes into a library JAR file and reference that library in both of my other applications.  This way I actually have the whole domain class and access to the dynamic find methods and all that other good stuff.  But, how do you package these?  Do you compile the Groovy classes then package the .class files? Will the data source information have to be set for the domain class(es) in the JAR, or will the data source of the application referencing the library be used?</p>




<p>Now some more seasoned Java and Hibernate developers might simply laugh at that barrage of questions, but for me it presented a serious barrier to entry.  Fortunately there is a better way.</p>




<h2>Just plug it in!</h2>


<p>It didn't take me long to discover that putting my reusable code into a <a href="http://grails.org/doc/latest/guide/12.%20Plug-ins.html" target="_blank">Grails Plugin</a> was the best and most scalable approach. For the sake of demonstration I'm going to take you through an example comment submission and administration application, kinda like blog comments.</p>


<p><strong>The plugin project</strong></p>

<p>First, let's go ahead and create our plugin project.</p>


<p><code>
grails create-plugin Modular-DAL
</code></p>

<p>Once you've got your shiny new plugin created, open it up with your favorite IDE (I use <a href="http://www.springsource.com/products/sts">Spring Source Tool Suite</a>) and add a new domain class that you're going to be sharing.</p>


<p><code>
grails create-domain-class com.nslms.modular.domain.Comment
</code></p>

<p>Now we specify some properties for our new shared domain class.</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Comment.groovy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">nslms</span><span class="o">.</span><span class="na">modular</span><span class="o">.</span><span class="na">domain</span><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;class Comment {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">static</span> <span class="n">constraints</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">name</span><span class="o">(</span><span class="nl">blank:</span><span class="kc">false</span><span class="o">)</span>
</span><span class='line'>    <span class="n">email</span><span class="o">(</span><span class="nl">blank:</span><span class="kc">false</span><span class="o">)</span>
</span><span class='line'>    <span class="n">comment</span><span class="o">(</span><span class="nl">blank:</span><span class="kc">false</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">name</span>
</span><span class='line'><span class="n">String</span> <span class="n">email</span>
</span><span class='line'><span class="n">String</span> <span class="n">website</span>
</span><span class='line'><span class="n">String</span> <span class="n">comment</span>
</span><span class='line'>
</span><span class='line'><span class="n">Boolean</span> <span class="n">isApproved</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>With our new shared domain class created, we want to package up our plugin so we can load it into the other projects which we'll be creating in a moment.</p>


<p><code>
grails package-plugin
</code></p>

<p>That's it, you've just created a (very small) module of your application which contains a shared domain class.  This could, of course, contain any number of domain classes, controllers, or services, views, javascript, css, etc. that would be used by other parts of your application, or by other applications.</p>


<p><strong>The Front End</strong></p>

<p>Now, lets create an application which will serve as the "front end" or externally facing form for collecting data.</p>


<p><code>
grails create-app Modular-FrontEnd
</code></p>

<p>Then the very important part of installing the plugin we just created</p>


<p><code>
grails install-plugin ../Modular-DAL/grails-modular-dal-0.1.zip
</code></p>

<p>Because you can <a href="#download-instructions">download</a> the project I created, I'm not going to go into excruciating detail about the controller and view(s) I setup in my front end, but sufficed to say I am accessing the "Comment" domain class that is supplied by the Modular-DAL plugin project!</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CommentsController.groovy (snippet) mark:1,5 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">com.nslms.modular.domain.*</span><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;class CommentsController {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">def</span> <span class="n">index</span> <span class="o">=</span> <span class="o">{</span> <span class="o">[</span><span class="nl">comments:</span> <span class="n">Comment</span><span class="o">.</span><span class="na">findAllByisApproved</span><span class="o">(</span><span class="kc">true</span><span class="o">)]</span> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The result of the front end app should be a list of comments which are approved (by the backend) and a submission form to allow you to submit new comments. <!-- Kinda like <a href="http://www.nslms.com/grails/examples/modular/frontend/comments" target="_blank">this</a>. --></p>


<p><strong>The Back End</strong></p>

<p>Now we need to create the system which will allow you as the administrator to approve the comments submitted by the unwashed masses.</p>


<p><code>
grails create-app Modular-BackEnd
</code></p>

<p>And install the plugin with the shared domain class.</p>


<p><code>
grails install-plugin ../Modular-DAL/grails-modular-dal-0.1.zip
</code></p>

<p>Again because you can <a href="#download-instructions">download</a> the project I created, here's just a snippet of the admin controller showing the juicy bits where we use the shared domain class</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>AdminController.groovy (snippet) mark:1,5 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">com.nslms.modular.domain.*</span><span class="o">;&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;class AdminController {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">def</span> <span class="n">comments</span> <span class="o">=</span> <span class="o">{</span> <span class="o">[</span><span class="nl">comments:</span> <span class="n">Comment</span><span class="o">.</span><span class="na">findAllByisApproved</span><span class="o">(</span><span class="kc">false</span><span class="o">)]</span> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The back end app should have a list of all unapproved comments, and a method to approve them.  <!--Kinda like <a href="http://www.nslms.com/grails/examples/modular/backend/admin/comments" target="_blank">this</a>.--></p>


<p><strong>Trying it out</strong></p>

<p>Now if you've followed along and created your own controllers and views, or <a href="#download-instructions">downloaded</a> my basic project, you're going to want to try running both the front end and back end at the same time, persisting data to a common datasource so that you can see the whole thing in action.  If you just use the grails run-app command, you'll find very quickly that you can only run one or the other project, but not both at the same time.  This is because they'll both be trying to run on the common Tomcat port (8080).  To overcome this, and run both apps at the same time, try the following starting from the Modular-FrontEnd directory.</p>


<p>```
grails -Dserver.port=8081 run-app
cd ../Modular-BackEnd
grails -Dserver.port=8082 run-app</p>

<p>```</p>

<p>Now you should be able to access both applications at <a href="http://localhost:8081/FrontEnd">http://localhost:8081/FrontEnd</a> and <a href="http://localhost:8082/BackEnd">http://localhost:8082/BackEnd</a> respectively.</p>


<p><b id="download-instructions">Download The Project(s)</strong></p>

<p>If you want to download the project(s) and follow along, fire up your favorite subversion client and export everything at <del datetime="2010-12-26T22:17:49+00:00"><a href="svn://linode.nslms.com/blog/grails/Modular">svn://linode.nslms.com/blog/grails/Modular</a></del> or download it <a href="http://www.nslms.com/downloads/Modular.zip">here</a>.  A couple things to note if you're grabbing my project, it's currently setup to use a MySQL database named "modular" running on the same system as the application.  If you don't already have MySQL setup, give <a href="http://www.apachefriends.org/en/xampp.html">XAMPP</a> a look to get you started quickly.  Also, I didn't include the JDBC driver, go fetch it <a href="http://www.mysql.com/downloads/connector/j/">here</a> and drop it into the "lib" directory of both the FrontEnd and BackEnd applications.  Lastly, these projects are all written with Grails 1.2.1 so you'll have to be using 1.2.1 or newer.</p>


<p><em><strong><span style="color: #ff0000;">* UPDATE: The example apps have a new home..</span></strong></em></p>

<p>Grab the projects at</p>


<p><code>
git clone git://ec2.nslms.com/grails/blog_example_modular
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fitting Grails in an Active Directory and NTLM SSO Groove]]></title>
    <link href="http://blog.ryangeyer.com/2010/02/10/fitting-grails-in-an-active-directory-and-ntml-sso-groove/"/>
    <updated>2010-02-10T00:00:00-08:00</updated>
    <id>http://blog.ryangeyer.com/2010/02/10/fitting-grails-in-an-active-directory-and-ntml-sso-groove</id>
    <content type="html"><![CDATA[<p>This is my first installment in the <a href="/2010/02/05/what-grooves-you/">What Grooves You?</a> series of posts, and it deals with the first thing you're going to need to consider if you are deploying your Grails/Groovy applications in the average corporate IT infrastructure, Single Sign On with Active Directory and NTLM.  Like it or not, because all of our existing applications are based on Microsoft technologies our users have gotten used to just going to the URL for the application they intend to use and being instantly recognized and authenticated.  Forcing them to sign in again, or worse still forcing them to setup a new username and password for your system would be completely unacceptable!  Below, I'll take you through the steps I took to solve this problem, including the detours that cost me time!</p>


<!--more-->




<p>Throughout this post I'll be referring to domain objects, controllers, and views which would have been created by running the <a href="http://www.grails.org/AcegiSecurity+Plugin+-+LDAP+Tutorial">Acegi LDAP tutorial</a>.  So if you want to follow along, go walk through the tutorial, then come back here to see how we tweak it.  Be sure to take the "optional" step of creating the views and controllers for the auth domains, you'll need it not only in the tutorial, but also for some customization we'll be doing later.

```
grails generate-manager
```


You can also download a copy of the Spring Source STS project I used for this application <a href="http://www.nslms.com/downloads/GrailsInActiveDirectoryGroove.zip">here</a>.
</p>




<h2>LDAP Single Identity but not Single Sign On</h2>


<p>As I started searching to figure out how to authenticate my users, everything seemed to point to using the <a href="http://grails.org/plugin/acegi">Acegi Plugin</a> for Grails, and using it with LDAP, tweaked to talk to Active Directory.  So, I started down this path and followed the <a href="http://www.grails.org/AcegiSecurity+Plugin+-+LDAP+Tutorial">LDAP tutorial</a> for the Acegi plugin.  Without a lot of trouble I got this working by following the steps in the tutorial, though I did make a couple significant changes to the SecurityConfig.groovy file to make it play nice with Active Directory</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SecurityConfig.groovy mark:14,17,18 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;security {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// see DefaultSecurityConfig.groovy for all settable/overridable properties</span>
</span><span class='line'>
</span><span class='line'><span class="n">active</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">useLdap</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'><span class="n">ldapRetrieveDatabaseRoles</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'><span class="n">ldapRetrieveGroupRoles</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'><span class="n">ldapServer</span> <span class="o">=</span> <span class="s1">&#39;ldap://&amp;lt;your-domain-controller&amp;gt;&#39;</span>
</span><span class='line'><span class="n">ldapManagerDn</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;your-service-account-dn&amp;gt;&#39;</span>
</span><span class='line'><span class="n">ldapManagerPassword</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;your-service-account-password&amp;gt;&#39;</span>
</span><span class='line'><span class="n">ldapSearchBase</span> <span class="o">=</span> <span class="s1">&#39;OU=People,DC=yourdomain,DC=com&#39;</span>
</span><span class='line'><span class="n">ldapSearchFilter</span> <span class="o">=</span> <span class="s1">&#39;(sAMAccountName={0})&#39;</span>
</span><span class='line'><span class="n">ldapSearchSubtree</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'><span class="n">ldapGroupSearchBase</span> <span class="o">=</span> <span class="s1">&#39;CN=Users,DC=yourdomain,DC=com&#39;</span>
</span><span class='line'><span class="n">ldapGroupSearchFilter</span> <span class="o">=</span> <span class="s1">&#39;member={0}&#39;</span>
</span><span class='line'><span class="n">ldapUsePassword</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>
</span><span class='line'><span class="n">loginUserDomainClass</span> <span class="o">=</span> <span class="s2">&quot;User&quot;</span>
</span><span class='line'><span class="n">authorityDomainClass</span> <span class="o">=</span> <span class="s2">&quot;Role&quot;</span>
</span><span class='line'><span class="n">requestMapClass</span> <span class="o">=</span> <span class="s2">&quot;Requestmap&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>By setting ldapSearchFilter to '(sAMAccountName={0})', we're telling the Acegi plugin to look for the field in Active Directory that stores the username, this means that users can login just like they're used to by using their Active Directory user name and password.</p>




<p>The ldapGroupSearchBase and ldapGroupSearchFilter are set such that any domain user groups that a user is a member of become Acegi "Roles" which can be used to determine if a user has authority to do stuff in the application.</p>




<p>Setting ldapUsePassword to false is important too.  What we're telling the Acegi plugin is not to extract the users password from Active Directory.  If you don't set this to false, you'll get a lovely exception which isn't particularly useful, <strong><em>java.lang.IllegalArgumentException: Cannot pass null or empty values to constructor</em><em></em></strong>.  What this is trying to tell you is that the users password is null, which is correct since the default setting for the Acegi plugin is to try to extract the users password from Active Directory, and we haven't told Acegi what attribute Active Directory stores the password in.  By setting ldapUsePassword to false, the plugin provides a bogus password for the user details, and we're able to proceed without incident.</p>




<p>So, great!  If you've made these changes and followed the steps in the tutorial to add a user  to the application domain with the same username as your Active Directory user you can authenticate users with the username and password they're already using to login to their computer, we have a single identity for this person.  But remember, our users are used to simply going to a URL and not being prompted to login.  How do we reproduce that experience?</p>




<h2>NTLM Really Single Sign On</h2>


<p>Having realized that using Active Directory/LDAP authentication works, but isn't an actual single sign on solution I started looking into the other settings in the <a href="http://www.grails.org/AcegiSecurity+Plugin+-+Customizing+with+SecurityConfig">SecurityConfig.groovy</a> file.  Turns out there is an NTLM option, but no corresponding tutorial!  Here's my configuration for using NTLM.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SecurityConfig.groovy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;security {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// see DefaultSecurityConfig.groovy for all settable/overridable properties</span>
</span><span class='line'>
</span><span class='line'><span class="n">active</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">useNtlm</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'><span class="n">ntlm</span><span class="o">.</span><span class="na">stripDomain</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'><span class="n">ntlm</span><span class="o">.</span><span class="na">defaultDomain</span> <span class="o">=</span> <span class="s2">&quot;yourdomain.com&quot;</span>
</span><span class='line'><span class="n">ntlm</span><span class="o">.</span><span class="na">netbiosWINS</span> <span class="o">=</span> <span class="s2">&quot;&amp;lt;your-domain-controller-ip&amp;gt;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">loginUserDomainClass</span> <span class="o">=</span> <span class="s2">&quot;User&quot;</span>
</span><span class='line'><span class="n">authorityDomainClass</span> <span class="o">=</span> <span class="s2">&quot;Role&quot;</span>
</span><span class='line'><span class="n">requestMapClass</span> <span class="o">=</span> <span class="s2">&quot;Requestmap&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Nothing really outstanding here, I chose to set ntlm.stripDomain to false, so that the users name is not prefixed by the domain, I.E. DOMAIN\username.  Also ntlm.defaultDomain and ntlm.netbiosWINS are both required, and I found that the ntlm.netbiosWINS works better if you actually give it the IP address of your domain controller, rather than the DNS name.</p>




<p>With NTLM configured, our Grails app now accepts the users cached authentication from their windows session.  True single sign on!</p>




<h2>Securing the Security Controllers and BootStrapping</h2>


<p>Now we've got an application which will use NTLM to authenticate the user, we restrict access using the requestmap, and we add users and their roles using the user and role controllers.  The problem, of course is that if you deploy this application anyone can go right to http://yourdomain.com/sso-app/user and add themselves as a user with any roles they see fit!  So we need to make sure that our security controllers are secured, and that there is an authorized user that can get in to add users and roles.</p>


<p><strong>Securing the Security Controllers</strong></p>

<p>The first thing we're going to want to do is secure our authentication controllers.  My preference is to do this with annotations on the controllers, so lets secure the UserController and RoleController with annotations.  Shown below we annotate them to show that the "ROLE_USER_ADMINISTRATOR" role is necessary to access any of the pages for either controller.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>UserController.groovy mark:1,3 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;import org.codehaus.groovy.grails.plugins.springsecurity.Secured;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@Secured</span><span class="o">([&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">ROLE_USER_ADMINISTRATOR</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;])</span>
</span><span class='line'><span class="s">/&lt;em&gt;*</span>
</span><span class='line'><span class="s"> * User controller.</span>
</span><span class='line'><span class="s"> &lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="s">/</span>
</span><span class='line'><span class="s">class UserController {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* Snip */</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>RoleController.groovy mark:1,3 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;import org.codehaus.groovy.grails.plugins.springsecurity.Secured;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@Secured</span><span class="o">([&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">ROLE_USER_ADMINISTRATOR</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;])</span>
</span><span class='line'><span class="s">/&lt;em&gt;*</span>
</span><span class='line'><span class="s"> * Authority Controller.</span>
</span><span class='line'><span class="s"> &lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="s">/</span>
</span><span class='line'><span class="s">class RoleController {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* Snip */</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Enabling the @Secured annotation</strong></p>

<p>Now if you were simply to run the application like this, you'd find that you can still freely navigate to /user and /role without having to be authenticated, that's because we are still configured to use the Requestmap to restrict access to specific parts of our application.  To configure this for use with annotations instead, we only need to make a couple of small changes to the SecurityConfig.groovy file.</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SecurityConfig.groovy mark:14,16,17 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;security {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// see DefaultSecurityConfig.groovy for all settable/overridable properties</span>
</span><span class='line'>
</span><span class='line'><span class="n">active</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">useNtlm</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'><span class="n">ntlm</span><span class="o">.</span><span class="na">stripDomain</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'><span class="n">ntlm</span><span class="o">.</span><span class="na">defaultDomain</span> <span class="o">=</span> <span class="s2">&quot;yourdomain.com&quot;</span>
</span><span class='line'><span class="n">ntlm</span><span class="o">.</span><span class="na">netbiosWINS</span> <span class="o">=</span> <span class="s2">&quot;&amp;lt;your-domain-controller-ip&amp;gt;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">loginUserDomainClass</span> <span class="o">=</span> <span class="s2">&quot;User&quot;</span>
</span><span class='line'><span class="n">authorityDomainClass</span> <span class="o">=</span> <span class="s2">&quot;Role&quot;</span>
</span><span class='line'><span class="c1">//requestMapClass = &quot;Requestmap&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">userRequestMapDomainClass</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'><span class="n">useControllerAnnotations</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Setting useControllerAnnotations to true gives the @Secured annotations on the user and role controllers meaning.  By setting userRequestMapDomainClass to false we tell the Acegi security plugin to not even query for restrictions in the database, but to use only the static configuration defined by the annotations.  We also delete the requestMapClass line.  I commented it here instead of deleting it so it can be highlighted as a change in the file, but we're not quite done with the requestmap yet.  Now that we've configured our application not to use the request map we can delete the controller, domain, and views for it.  Go ahead and delete the following files.

<ul>
  <li>/grails-app/controller/RequestmapController.groovy</li>
  <li>/grails-app/domain/Requestmap.groovy</li>
  <li>/grails-app/views/requestmap/*</li>
</ul>
</p>


<p><strong>BootStrapping</strong></p>

<p>Now that we have our app secured, and we're using annotations to restrict access we need to make sure that some user can successfully login after we first deploy our application.  Otherwise no one will be able to access the pages to add new users!  So we use boot strapping to add a user administrator who can add more users and roles for the application.</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>BootStrap.groovy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;class BootStrap {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">def</span> <span class="n">authenticateService</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">init</span> <span class="o">=</span> <span class="o">{</span> <span class="n">servletContext</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">role</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Role</span><span class="o">(</span><span class="nl">authority:</span> <span class="s1">&#39;ROLE_USER_ADMINISTRATOR&#39;</span><span class="o">,</span> <span class="nl">description:</span><span class="s1">&#39;User Administrator&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">role</span><span class="o">.</span><span class="na">save</span><span class="o">()</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="nl">username:</span> <span class="s1">&#39;admin&#39;</span><span class="o">,</span>
</span><span class='line'>            <span class="nl">userRealName:</span> <span class="s1">&#39;Administrator&#39;</span><span class="o">,</span>
</span><span class='line'>            <span class="nl">passwd:</span> <span class="n">authenticateService</span><span class="o">.</span><span class="na">encodePassword</span><span class="o">(</span><span class="s1">&#39;foobar&#39;</span><span class="o">),</span>
</span><span class='line'>            <span class="nl">enabled:</span> <span class="kc">true</span><span class="o">,</span>
</span><span class='line'>            <span class="nl">description:</span> <span class="s1">&#39;&#39;</span><span class="o">,</span>
</span><span class='line'>            <span class="nl">email:</span> <span class="s1">&#39;&#39;</span><span class="o">,</span>
</span><span class='line'>            <span class="nl">emailShow:</span> <span class="kc">false</span><span class="o">)</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="na">addToAuthorities</span><span class="o">(</span><span class="n">role</span><span class="o">)</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="na">save</span><span class="o">()</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="kt">def</span> <span class="n">destroy</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So there you have it, an application which allows users to connect using their cached authentication using NTLM, uses annotations to secure your controllers, and actually allows access to at least one user once it's deployed.  Now, there are still some weaknesses.  Particularly the level of permissions you can assign is limited to roles, I.E. "Administrator", "User", "Reporting User", "User Administrator", etc.  Also in a corporate environment, having to go through this configuration for every grails app, and adding users and assigning their roles for each app can be tedious.  I'll be looking into improving these things with Acegi ACL's and possibly using a centralized database for users and roles in future articles so stay tuned!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Grooves You?]]></title>
    <link href="http://blog.ryangeyer.com/2010/02/05/what-grooves-you/"/>
    <updated>2010-02-05T00:00:00-08:00</updated>
    <id>http://blog.ryangeyer.com/2010/02/05/what-grooves-you</id>
    <content type="html"><![CDATA[<p>In my &quot;Day Job&quot;, we design and build our applications using Microsoft technologies.  In particular, we're using C#, Silverlight, and IIS to build and deploy our web applications.  This makes good sense because the vendors we use are well versed in the Microsoft technology, and like the IT infrastructure of a lot of medium and large companies Microsoft solutions are at the forefront.  It's becoming apparent though that we're going to have to consider our options and possibly embrace a different technology stack to properly scale and support the applications we're building.</p>




<p>While I knew that Java servlets and the Spring Framework were the answers, credit goes to my boss <a href="http://www.linkedin.com/profile?viewProfile=&key=11181889">Scott Ellis</a> for really doing a deep dive into what technologies are on offer, and coming up with using Grails and Groovy as the best solution for us.  Which brings me to the reason for this blog post.  I've been spending some time playing around with Grails and Groovy, and familiarizing myself with the technology and what is on offer.  I intend to do a series of posts here about my discovery process, what problems I encounter, and how I resolve them.</p>




<p>From the searching I've had to do in order to get answers or better understanding about the challenges I've faced, I think I have a chance to be a real resource to others who are just starting out with Grails and Groovy.  What's more I'm writing from the perspective of a relative newbie to the Java world.  Stay tuned as you follow my journey into Grails and Groovy. <em><strong>*Spoiler alert* - I like it, a LOT!</strong></em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catching the Wave]]></title>
    <link href="http://blog.ryangeyer.com/2009/11/06/catching-the-wave/"/>
    <updated>2009-11-06T00:00:00-08:00</updated>
    <id>http://blog.ryangeyer.com/2009/11/06/catching-the-wave</id>
    <content type="html"><![CDATA[<p>I am something of a Google Zealot, I was using the search engine back before many people knew what it was and haven&rsquo;t strayed since.  I&rsquo;ve been using GMail for the better part of two years, and it handles ALL of my incoming mail, I even forward all of the emails from my self hosted domains to it.  I use Google Docs for everything, including writing and storing invoices for my consulting work and any of my other &ldquo;office&rdquo; needs.  And I use Google Voice daily for business phone calls.  We used Google Maps to find and track rental homes, and it helped us find the place we&rsquo;re living in now.  Google Analytics keeps a finger on the pulse of the (itty bitty) traffic on this site.  Google Reader is my RSS reader of choice, which I use almost strictly through a gadget on my iGoogle homepage along with tgadget for Twitter.  I sync my iPhone with Google Calendar, and wouldn&rsquo;t know what I&rsquo;m doing any particular day without it.  You get the idea.  :&ndash;)</p>

<p>So you can imagine that when I heard about Google Wave, I instantly signed up to receive an early invite.  And as you can probably also imagine, I was super disappointed when the first set of invites went out to the public, and I didn&rsquo;t get mine!  I watched as many of the people I follow on Twitter announced that they&rsquo;d received their invite, and were happily getting started with Google Wave.  Of course, many of them were reporting serious usability issues and disappointments but I was never-the-less anxious to get my peek at it.  After a few short weeks I managed to trade a Google Voice invite for a Google Wave invite.</p>

<p>Now getting the wave invite was&hellip; Interesting..  Evidently when a user is granted some discretionary invitations they aren&rsquo;t sent out immediately when used.  Instead a user &ldquo;nominates&rdquo; a person to receive a Google Wave account.  Apparently there is some waiting involved, and I suspect some manual human intervention on the part of Google in order to actually send the concrete invitation.  After waiting four days (two of which were the weekend) I actually received the email that my invitation had arrived!</p>

<p>My initial interaction with Wave was reasonably short.  I watched a couple of the introduction videos, make a few setting changes to my profile, added a couple of people who I knew were on Wave, and logged out.  My first real Wave was from an acquaintance of mine from Twitter who had also recently gotten Wave.  We both admitted that we were excited to have the new tool, but really had very little idea of what it was really intended for!</p>

<p>After having a couple interactions with a few others later that day, I started to get a feel for the interface and the power of the tool.  See, I&rsquo;m currently working on a software project which is reasonably large in scope.  The nature of the company I work for means that we didn&rsquo;t have the time, money, or expertise to hire a big enough development team to accomplish the software solution we&rsquo;re trying to build.  So, we&rsquo;re managing with myself as the lead architect, a business analyst who knows what this thing is supposed to do, and a project manager on our side.  Then we&rsquo;re having all of the development work done by an offshore team.</p>

<p>Very quickly it struck me that Wave lends itself VERY well to this sort of thing, and in fact I think real-time collaboration for creative/design purposes is exactly what this tool is designed for.  In many of the sessions of collaboration that we&rsquo;ve had over the phone, having a parallel wave would be invaluable!  Imagine an integration with Google Docs, I can create a wordpressing doc, a presentation, or a spreadsheet and simply attach it to the wave.  Or I can take a screenshot and toss it in there where it is appropriate.  Everyone has visibility to the results.  This thing is DESIGNED for agile, if you ask me.</p>

<p>That said, this is still a very early version.  In all of the &ldquo;buzz&rdquo; about Wave it was claimed that it will contact you in any way that is appropriate.  If you&rsquo;re at your computer, and logged into Wave, you&rsquo;d get the real-time view.  Not logged in?  That&rsquo;s okay we&rsquo;ll nag you by email.  Not at a computer?  Easy you&rsquo;ll get an SMS message.  None of that functionality seems to be there yet though, as there is no place to supply my email address (you&rsquo;re supplied with an @googlewave.com address which you can&rsquo;t access), or my phone number (should already know my Google Voice number).  And there is the matter of stability.  It certainly has some kinks to be worked out.</p>

<p>So, now that I&rsquo;ve caught the Wave, I&rsquo;m looking forward to really starting to use it to my advantage and riding along to see how the tool evolves.  Isn&rsquo;t it fun being an early adopter?</p>
]]></content>
  </entry>
  
</feed>
